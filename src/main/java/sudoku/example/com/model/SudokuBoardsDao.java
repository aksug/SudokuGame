package sudoku.example.com.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sudoku.example.com.model.SudokuBoards;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUDOKU_BOARDS".
*/
public class SudokuBoardsDao extends AbstractDao<SudokuBoards, Long> {

    public static final String TABLENAME = "SUDOKU_BOARDS";

    /**
     * Properties of entity SudokuBoards.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Visible_numbers = new Property(1, String.class, "visible_numbers", false, "VISIBLE_NUMBERS");
        public final static Property Solution = new Property(2, String.class, "solution", false, "SOLUTION");
        public final static Property Level = new Property(3, String.class, "level", false, "LEVEL");
        public final static Property Users_solution = new Property(4, String.class, "users_solution", false, "USERS_SOLUTION");
        public final static Property Users_suggestions = new Property(5, String.class, "users_suggestions", false, "USERS_SUGGESTIONS");
        public final static Property Board_used = new Property(6, Boolean.class, "board_used", false, "BOARD_USED");
    };


    public SudokuBoardsDao(DaoConfig config) {
        super(config);
    }
    
    public SudokuBoardsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUDOKU_BOARDS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VISIBLE_NUMBERS\" TEXT NOT NULL UNIQUE ," + // 1: visible_numbers
                "\"SOLUTION\" TEXT NOT NULL ," + // 2: solution
                "\"LEVEL\" TEXT NOT NULL ," + // 3: level
                "\"USERS_SOLUTION\" TEXT," + // 4: users_solution
                "\"USERS_SUGGESTIONS\" TEXT," + // 5: users_suggestions
                "\"BOARD_USED\" INTEGER);"); // 6: board_used
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUDOKU_BOARDS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SudokuBoards entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getVisible_numbers());
        stmt.bindString(3, entity.getSolution());
        stmt.bindString(4, entity.getLevel());
 
        String users_solution = entity.getUsers_solution();
        if (users_solution != null) {
            stmt.bindString(5, users_solution);
        }
 
        String users_suggestions = entity.getUsers_suggestions();
        if (users_suggestions != null) {
            stmt.bindString(6, users_suggestions);
        }
 
        Boolean board_used = entity.getBoard_used();
        if (board_used != null) {
            stmt.bindLong(7, board_used ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SudokuBoards readEntity(Cursor cursor, int offset) {
        SudokuBoards entity = new SudokuBoards( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // visible_numbers
            cursor.getString(offset + 2), // solution
            cursor.getString(offset + 3), // level
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // users_solution
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // users_suggestions
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // board_used
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SudokuBoards entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVisible_numbers(cursor.getString(offset + 1));
        entity.setSolution(cursor.getString(offset + 2));
        entity.setLevel(cursor.getString(offset + 3));
        entity.setUsers_solution(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUsers_suggestions(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBoard_used(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SudokuBoards entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SudokuBoards entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
